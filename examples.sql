SET SQL DIALECT 3;

/**
 * Domains
 */
CREATE DOMAIN D_BOOLEAN AS
SMALLINT
CHECK (VALUE IN (0, 1));

CREATE DOMAIN D_MONEY AS
NUMERIC(15,2);

CREATE DOMAIN D_ZIPCODE AS
CHAR(10)
CHECK (TRIM(TRAILING FROM VALUE) SIMILAR TO '[0-9]+');

/**
 * Sequences
 */
CREATE SEQUENCE GEN_CUSTOMER_ID START WITH 0 INCREMENT BY 1;
ALTER SEQUENCE GEN_CUSTOMER_ID RESTART WITH 447;

CREATE SEQUENCE GEN_INVOICE_ID START WITH 0 INCREMENT BY 1;
ALTER SEQUENCE GEN_INVOICE_ID RESTART WITH 200025;

CREATE SEQUENCE GEN_INVOICE_LINE_ID START WITH 0 INCREMENT BY 1;
ALTER SEQUENCE GEN_INVOICE_LINE_ID RESTART WITH 1000012;

CREATE SEQUENCE GEN_PRODUCT_ID START WITH 0 INCREMENT BY 1;
ALTER SEQUENCE GEN_PRODUCT_ID RESTART WITH 2894;

/**
 * Exceptions
 */
CREATE EXCEPTION E_INVOICE_ALREADY_PAYED 'Change is impossible, invoice paid.';


/**
 * Empty stored procedures
 */
SET TERM ^ ;

CREATE OR ALTER PROCEDURE SP_ADD_INVOICE (
    INVOICE_ID INTEGER,
    CUSTOMER_ID INTEGER,
    INVOICE_DATE TIMESTAMP = CURRENT_TIMESTAMP)
AS
BEGIN
  EXIT;
END^

CREATE OR ALTER PROCEDURE SP_ADD_INVOICE_LINE (
    INVOICE_ID INTEGER,
    PRODUCT_ID INTEGER,
    QUANTITY INTEGER)
AS
BEGIN
  EXIT;
END^

CREATE OR ALTER PROCEDURE SP_DELETE_INVOICE (
    INVOICE_ID INTEGER)
AS
BEGIN
  EXIT;
END^

CREATE OR ALTER PROCEDURE SP_DELETE_INVOICE_LINE (
    INVOICE_LINE_ID INTEGER)
AS
BEGIN
  EXIT;
END^

CREATE OR ALTER PROCEDURE SP_EDIT_INVOICE (
    INVOICE_ID INTEGER,
    CUSTOMER_ID INTEGER,
    INVOICE_DATE TIMESTAMP)
AS
BEGIN
  EXIT;
END^

CREATE OR ALTER PROCEDURE SP_EDIT_INVOICE_LINE (
    INVOICE_LINE_ID INTEGER,
    QUANTITY INTEGER)
AS
BEGIN
  EXIT;
END^

CREATE OR ALTER PROCEDURE SP_PAY_FOR_INOVICE (
    INVOICE_ID INTEGER)
AS
BEGIN
  EXIT;
END^

SET TERM ; ^


/**
 * Tables
 */
CREATE TABLE CUSTOMER (
    CUSTOMER_ID  INTEGER NOT NULL,
    NAME         VARCHAR(60) NOT NULL,
    ADDRESS      VARCHAR(250),
    ZIPCODE      D_ZIPCODE,
    PHONE        VARCHAR(14),
    CONSTRAINT PK_CUSTOMER PRIMARY KEY (CUSTOMER_ID)
);


CREATE TABLE INVOICE (
    INVOICE_ID    INTEGER NOT NULL,
    CUSTOMER_ID   INTEGER NOT NULL,
    INVOICE_DATE  TIMESTAMP,
    TOTAL_SALE    D_MONEY,
    PAID          D_BOOLEAN DEFAULT 0 NOT NULL,
    CONSTRAINT PK_INVOICE PRIMARY KEY (INVOICE_ID)
);


CREATE TABLE INVOICE_LINE (
    INVOICE_LINE_ID  INTEGER NOT NULL,
    INVOICE_ID       INTEGER NOT NULL,
    PRODUCT_ID       INTEGER NOT NULL,
    QUANTITY         NUMERIC(15,0) NOT NULL,
    SALE_PRICE       D_MONEY NOT NULL,
    CONSTRAINT PK_INVOICE_LINE PRIMARY KEY (INVOICE_LINE_ID)
);


CREATE TABLE PRODUCT (
    PRODUCT_ID   INTEGER NOT NULL,
    NAME         VARCHAR(100) NOT NULL,
    PRICE        D_MONEY NOT NULL,
    DESCRIPTION  BLOB SUB_TYPE TEXT,
    CONSTRAINT PK_PRODUCT PRIMARY KEY (PRODUCT_ID)
);


/**
 * Foreign keys
 */
ALTER TABLE INVOICE ADD CONSTRAINT FK_INVOCE_CUSTOMER
FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER (CUSTOMER_ID);

ALTER TABLE INVOICE_LINE ADD CONSTRAINT FK_INVOICE_LINE_INVOICE
FOREIGN KEY (INVOICE_ID) REFERENCES INVOICE (INVOICE_ID);

ALTER TABLE INVOICE_LINE ADD CONSTRAINT FK_INVOICE_LINE_PRODUCT
FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT (PRODUCT_ID);

/**
 * Indexes
 */
CREATE INDEX INVOICE_IDX_DATE ON INVOICE (INVOICE_DATE);

/**
 * Triggers
 */
SET TERM ^ ;

CREATE OR ALTER TRIGGER CUSTOMER_BI FOR CUSTOMER
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.CUSTOMER_ID IS NULL) THEN
    NEW.CUSTOMER_ID = NEXT VALUE FOR GEN_CUSTOMER_ID;
END
^


CREATE OR ALTER TRIGGER INVOICE_BI FOR INVOICE
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.INVOICE_ID IS NULL) THEN
    NEW.INVOICE_ID = GEN_ID(GEN_INVOICE_ID,1);
END
^


CREATE OR ALTER TRIGGER INVOICE_LINE_BI FOR INVOICE_LINE
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.INVOICE_LINE_ID IS NULL) THEN
    NEW.INVOICE_LINE_ID = NEXT VALUE FOR GEN_INVOICE_LINE_ID;
END
^


CREATE OR ALTER TRIGGER PRODUCT_BI FOR PRODUCT
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.PRODUCT_ID IS NULL) THEN
    NEW.PRODUCT_ID = NEXT VALUE FOR GEN_PRODUCT_ID;
END
^

/**
 * Stored procedures
 */
CREATE OR ALTER PROCEDURE SP_ADD_INVOICE (
    INVOICE_ID INTEGER,
    CUSTOMER_ID INTEGER,
    INVOICE_DATE TIMESTAMP = CURRENT_TIMESTAMP)
AS
BEGIN
  INSERT INTO INVOICE (
    INVOICE_ID,
    CUSTOMER_ID,
    INVOICE_DATE,
    TOTAL_SALE,
    PAID
  )
  VALUES (
    :INVOICE_ID,
    :CUSTOMER_ID,
    :INVOICE_DATE,
    0,
    0
  );
END^


CREATE OR ALTER PROCEDURE SP_ADD_INVOICE_LINE (
    INVOICE_ID INTEGER,
    PRODUCT_ID INTEGER,
    QUANTITY INTEGER)
AS
DECLARE sale_price D_MONEY;
DECLARE paid       D_BOOLEAN;
BEGIN
  SELECT
      paid
  FROM
      invoice
  WHERE
        invoice_id = :invoice_id
  INTO :paid;

  -- It does not allow you to edit already paid invoice.
  IF (paid = 1) THEN
    EXCEPTION E_INVOICE_ALREADY_PAYED;

  SELECT
      price
  FROM
      product
  WHERE
        product_id = :product_id
  INTO :sale_price;

  INSERT INTO invoice_line (invoice_line_id,
                            invoice_id,
                            product_id,
                            quantity,
                            sale_price)
  VALUES (NEXT VALUE FOR gen_invoice_line_id,
          :invoice_id,
          :product_id,
          :quantity,
          :sale_price);

  -- Increase the amount of the account.
  UPDATE invoice
  SET total_sale = COALESCE(total_sale, 0) + :sale_price * :quantity
  WHERE invoice_id = :invoice_id;
END^


CREATE OR ALTER PROCEDURE SP_DELETE_INVOICE (
    INVOICE_ID INTEGER)
AS
BEGIN
  IF (EXISTS(SELECT * FROM INVOICE
             WHERE INVOICE_ID = :INVOICE_ID
               AND PAID = 1)) THEN
    EXCEPTION E_INVOICE_ALREADY_PAYED;

  DELETE FROM INVOICE WHERE INVOICE_ID = :INVOICE_ID;
END^


CREATE OR ALTER PROCEDURE SP_DELETE_INVOICE_LINE (
    INVOICE_LINE_ID INTEGER)
AS
DECLARE invoice_id INT;
DECLARE price      D_MONEY;
DECLARE quantity   INT;
BEGIN
  IF (EXISTS(SELECT *
             FROM invoice_line
                 JOIN invoice ON invoice.invoice_id = invoice_line.invoice_id
             WHERE invoice.paid = 1
               AND invoice_line.invoice_line_id = :invoice_line_id)) THEN
    EXCEPTION E_INVOICE_ALREADY_PAYED;

  DELETE FROM invoice_line
  WHERE invoice_line.invoice_line_id = :invoice_line_id
  RETURNING invoice_id, quantity, sale_price
  INTO invoice_id, quantity, price;

  -- Reduce the amount of the account.
  UPDATE invoice
  SET total_sale = total_sale - :quantity * :price
  WHERE invoice_id = :invoice_id;
END^


CREATE OR ALTER PROCEDURE SP_EDIT_INVOICE (
    INVOICE_ID INTEGER,
    CUSTOMER_ID INTEGER,
    INVOICE_DATE TIMESTAMP)
AS
BEGIN
  IF (EXISTS(SELECT *
             FROM INVOICE
             WHERE INVOICE_ID = :INVOICE_ID
               AND PAID = 1)) THEN
    EXCEPTION E_INVOICE_ALREADY_PAYED;

  UPDATE INVOICE
  SET CUSTOMER_ID = :CUSTOMER_ID,
      INVOICE_DATE = :INVOICE_DATE
  WHERE INVOICE_ID = :INVOICE_ID;
END^


CREATE OR ALTER PROCEDURE SP_EDIT_INVOICE_LINE (
    INVOICE_LINE_ID INTEGER,
    QUANTITY INTEGER)
AS
DECLARE invoice_id INT;
DECLARE price      D_MONEY;
DECLARE paid      D_BOOLEAN; 
BEGIN
  SELECT
      product.price,
      invoice.invoice_id,
      invoice.paid
  FROM
      invoice_line
      JOIN invoice ON invoice.invoice_id = invoice_line.invoice_id
      JOIN product ON product.product_id = invoice_line.product_id
  WHERE
        invoice_line.invoice_line_id = :invoice_line_id
  INTO :price,
       :invoice_id,
       :paid;

  -- It does not allow you to edit already paid invoice.
  IF (paid = 1) THEN
    EXCEPTION E_INVOICE_ALREADY_PAYED;

  -- Update price and quantity.
  UPDATE invoice_line
  SET sale_price = :price,
      quantity = :quantity
  WHERE invoice_line_id = :invoice_line_id;

  -- Now update the amount of the account.
  MERGE INTO invoice
  USING (SELECT
             invoice_id,
             SUM(sale_price * quantity) AS total_sale
         FROM invoice_line
         WHERE invoice_id = :invoice_id
         GROUP BY invoice_id) L
  ON invoice.invoice_id = L.invoice_id
  WHEN MATCHED THEN
      UPDATE SET total_sale = L.total_sale;
END^


CREATE OR ALTER PROCEDURE SP_PAY_FOR_INOVICE (
    INVOICE_ID INTEGER)
AS
begin
  IF (EXISTS(SELECT *
             FROM INVOICE
             WHERE INVOICE_ID = :INVOICE_ID
               AND PAID = 1)) THEN
    EXCEPTION E_INVOICE_ALREADY_PAYED;

  UPDATE INVOICE
  SET PAID = 1
  WHERE INVOICE_ID = :INVOICE_ID;
end^



SET TERM ; ^

/**
 * Roles
 */
CREATE ROLE MANAGER;
CREATE ROLE SUPERUSER;


/**
 * Comments
 */
COMMENT ON DOMAIN D_BOOLEAN IS 
'Boolean type. 0 - FALSE, 1- TRUE';

COMMENT ON DOMAIN D_ZIPCODE IS 
'Zip code';

COMMENT ON TABLE CUSTOMER IS 
'Customers';

COMMENT ON TABLE INVOICE IS 
'Invoices';

COMMENT ON TABLE INVOICE_LINE IS 
'Invoice lines';

COMMENT ON TABLE PRODUCT IS 
'Goods';

COMMENT ON PROCEDURE SP_ADD_INVOICE IS 
'Adding Invoice';

COMMENT ON PROCEDURE SP_ADD_INVOICE_LINE IS 
'Adding line invoices';

COMMENT ON PROCEDURE SP_DELETE_INVOICE IS 
'Deleting invoices';

COMMENT ON PROCEDURE SP_DELETE_INVOICE_LINE IS 
'Deleting invoce line';

COMMENT ON PROCEDURE SP_EDIT_INVOICE IS 
'Editing invoice';

COMMENT ON PROCEDURE SP_EDIT_INVOICE_LINE IS 
'Editing invoice line';

COMMENT ON PROCEDURE SP_PAY_FOR_INOVICE IS 
'Payment of invoices';

COMMENT ON GENERATOR GEN_CUSTOMER_ID IS 
'The sequence identifier for the customer';

COMMENT ON GENERATOR GEN_INVOICE_ID IS 
'The sequence number for the invoice';

COMMENT ON GENERATOR GEN_INVOICE_LINE_ID IS 
'The sequence identifier for invoice line';

COMMENT ON GENERATOR GEN_PRODUCT_ID IS 
'The sequence identifier for the product.';


COMMENT ON COLUMN CUSTOMER.CUSTOMER_ID IS
'Customer Id';

COMMENT ON COLUMN CUSTOMER.NAME IS 
'Name';

COMMENT ON COLUMN CUSTOMER.ADDRESS IS 
'Address';

COMMENT ON COLUMN CUSTOMER.ZIPCODE IS 
'Zip Code';

COMMENT ON COLUMN CUSTOMER.PHONE IS 
'Phone';

COMMENT ON COLUMN INVOICE.INVOICE_ID IS 
'Invoice number';

COMMENT ON COLUMN INVOICE.CUSTOMER_ID IS 
'Customer Id';

COMMENT ON COLUMN INVOICE.INVOICE_DATE IS 
'The date of issuance invoices';

COMMENT ON COLUMN INVOICE.TOTAL_SALE IS 
'Total sum';

COMMENT ON COLUMN INVOICE.PAID IS 
'Payed';

COMMENT ON COLUMN INVOICE_LINE.INVOICE_LINE_ID IS 
'Invoice line Id';

COMMENT ON COLUMN INVOICE_LINE.INVOICE_ID IS 
'Invoice number';

COMMENT ON COLUMN INVOICE_LINE.PRODUCT_ID IS 
'Product Id';

COMMENT ON COLUMN INVOICE_LINE.QUANTITY IS 
'Quantity';

COMMENT ON COLUMN INVOICE_LINE.SALE_PRICE IS 
'Price';

COMMENT ON COLUMN PRODUCT.PRODUCT_ID IS 
'Product Id';

COMMENT ON COLUMN PRODUCT.NAME IS 
'Name';

COMMENT ON COLUMN PRODUCT.PRICE IS 
'Price';

COMMENT ON COLUMN PRODUCT.DESCRIPTION IS 
'Description';


COMMENT ON PROCEDURE PARAMETER SP_ADD_INVOICE.CUSTOMER_ID IS 
'Customer Id';

COMMENT ON PROCEDURE PARAMETER SP_ADD_INVOICE.INVOICE_DATE IS 
'Date';

COMMENT ON PROCEDURE PARAMETER SP_ADD_INVOICE.INVOICE_ID IS 
'Invoice number';

COMMENT ON PROCEDURE PARAMETER SP_ADD_INVOICE_LINE.INVOICE_ID IS 
'Invoice number';

COMMENT ON PROCEDURE PARAMETER SP_ADD_INVOICE_LINE.PRODUCT_ID IS 
'Product Id';

COMMENT ON PROCEDURE PARAMETER SP_ADD_INVOICE_LINE.QUANTITY IS 
'Quantity';

COMMENT ON PROCEDURE PARAMETER SP_DELETE_INVOICE.INVOICE_ID IS 
'Invoice Id';

COMMENT ON PROCEDURE PARAMETER SP_DELETE_INVOICE_LINE.INVOICE_LINE_ID IS 
'Invoice line id';

COMMENT ON PROCEDURE PARAMETER SP_EDIT_INVOICE.CUSTOMER_ID IS 
'Customer Id';

COMMENT ON PROCEDURE PARAMETER SP_EDIT_INVOICE.INVOICE_DATE IS 
'Date';

COMMENT ON PROCEDURE PARAMETER SP_EDIT_INVOICE.INVOICE_ID IS 
'Invoice number';

COMMENT ON PROCEDURE PARAMETER SP_EDIT_INVOICE_LINE.INVOICE_LINE_ID IS 
'Invoice line id';

COMMENT ON PROCEDURE PARAMETER SP_EDIT_INVOICE_LINE.QUANTITY IS 
'Quantity';

COMMENT ON PROCEDURE PARAMETER SP_PAY_FOR_INOVICE.INVOICE_ID IS 
'Invoice number';


/**
 * Grant roles to users
 */
GRANT MANAGER TO ANNA;
GRANT MANAGER TO IVAN WITH ADMIN OPTION;
GRANT SUPERUSER TO IVAN;

/**
 * Grant privileges to MANAGER role
 */
GRANT SELECT ON CUSTOMER TO MANAGER;
GRANT SELECT ON INVOICE TO MANAGER;
GRANT SELECT ON INVOICE_LINE TO MANAGER;
GRANT SELECT ON PRODUCT TO MANAGER;
GRANT EXECUTE ON PROCEDURE SP_ADD_INVOICE TO MANAGER;
GRANT EXECUTE ON PROCEDURE SP_ADD_INVOICE_LINE TO MANAGER;
GRANT EXECUTE ON PROCEDURE SP_DELETE_INVOICE TO MANAGER;
GRANT EXECUTE ON PROCEDURE SP_DELETE_INVOICE_LINE TO MANAGER;
GRANT EXECUTE ON PROCEDURE SP_EDIT_INVOICE TO MANAGER;
GRANT EXECUTE ON PROCEDURE SP_EDIT_INVOICE_LINE TO MANAGER;
GRANT EXECUTE ON PROCEDURE SP_PAY_FOR_INOVICE TO MANAGER;

/**
 * Grant privileges to SUPERUSER role
 */
GRANT SELECT, INSERT, UPDATE, DELETE ON CUSTOMER TO SUPERUSER;
GRANT SELECT ON INVOICE TO SUPERUSER;
GRANT SELECT ON INVOICE_LINE TO SUPERUSER;
GRANT SELECT, INSERT, UPDATE, DELETE ON PRODUCT TO SUPERUSER;
GRANT EXECUTE ON PROCEDURE SP_ADD_INVOICE TO SUPERUSER;
GRANT EXECUTE ON PROCEDURE SP_ADD_INVOICE_LINE TO SUPERUSER;
GRANT EXECUTE ON PROCEDURE SP_DELETE_INVOICE TO SUPERUSER;
GRANT EXECUTE ON PROCEDURE SP_DELETE_INVOICE_LINE TO SUPERUSER;
GRANT EXECUTE ON PROCEDURE SP_EDIT_INVOICE TO SUPERUSER;
GRANT EXECUTE ON PROCEDURE SP_EDIT_INVOICE_LINE TO SUPERUSER;
GRANT EXECUTE ON PROCEDURE SP_PAY_FOR_INOVICE TO SUPERUSER;


/**
 * Grant privileges to triggers
 */
GRANT UPDATE, REFERENCES ON CUSTOMER TO TRIGGER CUSTOMER_BI;
GRANT UPDATE, REFERENCES ON INVOICE TO TRIGGER INVOICE_BI;
GRANT UPDATE, REFERENCES ON INVOICE_LINE TO TRIGGER INVOICE_LINE_BI;
GRANT UPDATE, REFERENCES ON PRODUCT TO TRIGGER PRODUCT_BI;


/**
 * Grant privileges to stored procedures
 */
GRANT INSERT ON INVOICE TO PROCEDURE SP_ADD_INVOICE;
GRANT SELECT, UPDATE ON INVOICE TO PROCEDURE SP_ADD_INVOICE_LINE;
GRANT INSERT ON INVOICE_LINE TO PROCEDURE SP_ADD_INVOICE_LINE;
GRANT SELECT ON PRODUCT TO PROCEDURE SP_ADD_INVOICE_LINE;
GRANT SELECT, DELETE ON INVOICE TO PROCEDURE SP_DELETE_INVOICE;
GRANT SELECT, UPDATE ON INVOICE TO PROCEDURE SP_DELETE_INVOICE_LINE;
GRANT SELECT, DELETE ON INVOICE_LINE TO PROCEDURE SP_DELETE_INVOICE_LINE;
GRANT SELECT, UPDATE ON INVOICE TO PROCEDURE SP_EDIT_INVOICE;
GRANT SELECT, UPDATE ON INVOICE TO PROCEDURE SP_EDIT_INVOICE_LINE;
GRANT SELECT, UPDATE ON INVOICE_LINE TO PROCEDURE SP_EDIT_INVOICE_LINE;
GRANT SELECT ON PRODUCT TO PROCEDURE SP_EDIT_INVOICE_LINE;
GRANT SELECT, UPDATE ON INVOICE TO PROCEDURE SP_PAY_FOR_INOVICE;
